함수 ======================================
c언어는 함수 오버로딩이 없음

함수명이 달라야 다른 함수로 인식

똑같은 함수명이 있으면 중복되서 인식을 못해서 
컴파일 에러 발생

함수명만 따짐 매개변수나 반환형을 따지지 않음

/* c는 밑에서 정의되면 사용하려 할 때 컴파일 에러가 남 */
main.c
int main(void) { f(); /* 컴파일 에러 */ }
void f(void) { printf("Hi"); }

main.cs
class Program
{
    public static void Main(string[] args) { F(); }
    public static void F() { Console.WriteLine("Hi"); }
}

C:\C> clang -std=c89 -W -Wall -pedantic-errors Test.c -o Test.exe
Test.c:5:5: warning: implicit declaration of function 'f' [-Wimplicit-function-declaration]
    f();
    ^
Test.c:9:6: error: conflicting types for 'f'
void f(void){
     ^
Test.c:5:5: note: previous implicit declaration is here
    f();
    ^
1 warning and 1 error generated.

컴파일러가 함수 정의를 먼저 봐야 하기 떄문에 
void f(void) { printf("Hi"); }
int main(void) { f();  }
이런식으로 정의를 해줘야 함

main에서 쓰는 함수가 100개 넘으면?

함수들도 서로 사용할 수 있으니 순서를 맞춰줘야함

순서 맞추기로도 함수 호출 불가능한 경우
void a(void) { b(); }
void b(void) { a(); }

변수에서 비슷한 예제

int a = b;
int b = a;

이런 경우를 해결하기 위해서 변수는 다음과 같이 했었음.
int a;
int b;

a = b;
b = a;

그래서 함수 선언도 이런식으로 하기로 함

함수 선언이란 함수의 원형만 컴파일러에게 넘겨줌

반환값 함수이름(매개변수); /* 함수 선언 */

함수 정의란 함수 선언 + 동작 코드까지 작성한 것
반환값 함수이름(매개변수) /* 함수 선언이면서 정의 */
{
    동작 코드
}

함수 순서 문제를 해결한 코드
void a(void);
void b(void);

void a(void) { b(); }
void b(void) { a(); }

앞쪽에서 선언했다고 해서 전방 선언이라고 함

c언어에서는 다른 파일에 정의된 함수를 
내 파일에서는 함수 전방선언만 해줘도 사용가능함

컴파일러와 링커의 동작방식을 알면 알 수 있음
나중에 빌드 과저 배울 때 배움

void 매개변수의 의미

선언에 쓰이는 거랑 정의 시에 쓰이는 void 매개변수는 의미가 서로 다름

함수 정의 시에는 void 매개변수를 생략하든 안하든 C#과 의미가 같다.

근데 함수 선언에서는 void 매개변수를 생략하면 의미가 달라짐
int f(); 와 int f(void);는 다른 의미

void 명시하는 경우에는 매개변수 없음의 void 매개변수이고 
생략할 경우에는 매개변수가 어떻게 오든 몇개가 오든 오지 않든 상관없음이란 의미

===============
int main(void)
{
    f();

    return 0;
}

int f(){
    printf("hello");
        
    return -1;
}

C:\C> clang -std=c89 -W -Wall -pedantic-errors Test.c -o Test.exe
Test.c:6:5: warning: implicit declaration of function 'f' [-Wimplicit-function-declaration]
    f();
    ^
1 warning generated.

이게 왜 됨??

/* int f(); */ 이 코드가 숨어있음

f(); 호출 구문을 만나는 순간 컴파일러는 이 코드가 있다고 생각하고
선언 정보와 호출 정보를 비교 후 이상 없으면 넘어감
c89에서는 반환형이 int 이고 매개변수가 없는 함수가 있다고
가정하기 때문에 int 일 경우만 가능함

/* int f(); */ f(1, 'A');
호출 구문을 만나는 순간 컴파일러는 이 코드가 있다고 생각하고
선언 정보와 호출 정보를 비교 후 이상 없으면 넘어감
/* int f(void); */
이 코드를 선언한 경우에는 컴파일러가 호출 구문과 
동일한 함수 선언을 못 찾아서 컴파일 에러가 남

int main(void) {
     printf("%d", f(1, 'A')); /* 66 */
}

int f(int num, char ch) {
     return num + (int)ch;
}
/* 함수 정의가 실제로도 있으므로 링커도 제대로 넘어감 */

===================================================== 함수 끝
평가순서

한 구문에 * / % 이런 연산자들이 우선순위로 연산됨

피연산자의 평가 순서

specified 명시된
unspecified 명시되지 않은
defined 정의된
undefined 정의되지 않은

피연산자의 평가 순서는 unspecified이기 때문에 unspecified로 인해
undefined 결과까지 나올 수 있음.

피연산자의 평가 순서는 c표준에 명시되지 않았기 때문에 
c표준에 명시되지 않음으로 인해 정의되지 않은 결과까지 나올 수 있음

이게 무슨말이냐면 컴파일러 마음대로라서 컴파일러에 따라
다른 결과가 나올 수 있고 정의되지 않은 결과라는 것은
c 표준에서는 A란 상황에서 어떤 결과가 나와야한다고
정의되지 않았기 때문에 어떤 결과가 나올지 모른다.

어떤 기능이 있다고는 했지만 컴파일러가 어떻게 구현해야할지는 알려주지 않아서
컴파일러 마음대로 구현 가능함

대표적인 unspecified 1바이트마다 비트수

c 기본 자료형의 비트수가 unspecified이다.

char 자료형을 보면 최소 8비트이상만 해주면 되기 때문에
컴파일러마다 다양할 수 있음

char는 무조건 1바이트이지만 위에 나왔듯이 비트수가 정해지지 않아서
1바이트가 8비트가 아닐 수 있음

2번째 예시

부동소수점 자료형이 실수 데이터를 비트에 저장하는 방법(비트 패턴 표기법)

명시되지 않아서 IEEE754를 따르지 않았을 수도 있음

undefined 

표준에 정의되지 않았다는 의미

코드의 동작 결과가 어떻게 나올지 정의할 수 없어서 위험할 수 있다.
결과 보장이 안됨

대표적인 예시

배열 인덱스 범위 초과 접근

indexoutofbound 를 의미 

배열의 크기를 4로 잡았는데 5에 있는 값을 읽어오려나 하거나 
수정하려할 때를 말함

C#에서는 Exception

c언어는 그냥 그 메무리 주소에 있는 값을 불러옴
그래서 쓰레기 값이 나올 수 있음
그걸 덮어쓰려하면 접근 하면 안되는 위험한 공간(시스템 메모리 공간)일 경우에도 그걸 바꿀 수 있음
위험!

어떤 수를 0으로 나눌 경우의 Exception
수학적으로도 정의되지 않았음

c언어에서는 정의되지 않아서 무슨 결과가 나올지 모름

3번째 

char 변수의 128 이상의 값을 대입

최대 -> 최소 오버플로우
최소 -> 최대 언더플로우

C:\C> clang -std=c89 -W -Wall -pedantic-errors Test.c -o Test.exe
Test.c:6:14: warning: implicit conversion from 'int' to 'char' changes value from 14000 to -80 [-Wconstant-conversion]
    char t = 14000;
         ~   ^~~~~
1 warning generated.

C:\C>Test
-80
C:\C> clang -std=c89 -W -Wall -pedantic-errors Test.c -o Test.exe
Test.c:6:14: warning: implicit conversion from 'int' to 'char' changes value from 14001 to -79 [-Wconstant-conversion]
    char t = 14001;
         ~   ^~~~~
1 warning generated.

C:\C>Test
-79

신기방기


char 앞에 unspecified 이기 때문에 컴파일러마다 unsigned일지 signed일지 모름
그래서 128을 넣었을때 컴파일러에 따라 128이 나올지 안 나올지 몰라서 undefined가 됨

================================
다시 평가순서로 돌아옴

2가지 경우에 발생

함수의 인자를 평가 할 때
인자값을 평가한다는 의미

피연산자의 평가 순서

값을 평가한다는 의미

변수가 다른 변수 안에 있는 값을 

int a = 3;
int b = 4;
add(a, b);

왼쪽부터 평가할 경우
add(3, b);
add(3, 4);

오른쪽부터 평가할 경우
add(a, 4);
add(3, 4);

====== 함수 인자의 평가순서부터 보면

printf("%d %d", num1 + num2, num2 + num3);

왼쪽부터 평가될지 오른쪽부터 평가될지 모르기 때문에
unspecified임
하지만 결과는 같기 때문에 undefined는 아님

함수 인자가 함수인 경우
printf("%d %d", add(num1, num2), add(num2, num3))

unspecified지만 undefined는 아님

undefined의 예시

int num = 0;
printf("%d %d", ++num, ++num);
/* 1 2 가 출력될 지, 2 1 이 출력될 지, 1 1일 지, 2 2일 지 모름. 이상한 값이 출력될 수도 있음 */

이런 경우 unspecified가 되서 undefined가 됨
컴파일러에 따라 결과값이 달라짐

printf("생성된 몬스터 수 : %d\n
    몬스터가 생성됐는지 여부 : %s",
    spawn_monster(),
    check_spawn_monster() ? "true" : "false"
);

몬스터가 먼저 생성되고, 그 뒤에 check_spawn_monster 함수에서 true가 반환되길 예상하지만
컴파일러에 따라 check_spawn_monster 함수가 먼저 호출되어 false로 평가되고
spawn_monster 함수가 뒤늦게 호출 될 수도 있음.
그럴 경우엔 생성된 몬스터 수 : 1\n몬스터가 생성됐는지 여부 : false 로 결과가 나옴. 
즉, 결과가 같음을 보장할 수 없음.(undefined)

피연산자가 변수인 경우.
int num = 1;
int result = ++num + ++num;
이 경우에도 2 + 3이 될지, 3 + 2가 될지 unspecified라서 알 수 없음.
문제는 동시에 평가될 경우 3 + 3이 될 수도 있고, ? + ? 가 될 수도 있어서 undefined 이기도 함.

피연산자가 함수인 경우.
기본적으로 맵 클리어 시에 5점 줌.
다이아몬드 맵 클리어 시 골드 맵이 클리어 되어있으면 추가 10점 줌.
int clear_score = clear_gold_map() +
                      clear_diamond_map();
clear_gold_map 함수가 먼저 호출되어 5점, clear_diamond_map 함수가 호출되어 15점을 주어 총점 20점을 예상함.
하지만 다른 컴파일러에서는 clear_diamond_map 함수가 먼저 호출되어서 10점이 될 수 있음. 즉, undefined 임

해결 방법은 두 함수를 따로 호출하면 순서가 보장됨.
int clear_score = 0;
clear_score += clear_gold_map();
clear_score += clear_diamond_map();

평가순서가 보장되게 하는 문자들 

대표적으로 ;

반면에 if (spawn_monster() == 1 &&
            check_spawn_monster() == 1)
같은 코드는 unspecified가 아님. 반드시 spawn_monster 함수가 먼저 실행됨.
그러므로 check_spawn_monster 함수의 반환값을 보장할 수 있으니 undefined 되지도 않음.

그 이유는 && 문자를 만나는 순간, 그 왼쪽에 있는 값은 전부 평가하도록 평가 순서를 강제해주기 때문.
이렇듯 && 처럼 평가 순서를 강제해주는 문자를 시퀀스 포인터라고 함. (|| 도 시퀀스 포인터)
다른 문자도 더 있으니 궁금하면 시퀀스 포인터에 대해 찾아볼 것.

별개로 if문 조건식이 논리 연산자로 여러 개 묶여 있을 경우
앞 조건식의 결과에 따라 뒤 조건식은 실행하지 않도록 최적화를 시킬 수 있는 short circuit 기법이 있음.
중요한 것이니 모른다면 검색 해볼 것. 이것은 프밍 기초에 해당하는 내용이라 여기서 설명 안 함.

C#은 왼쪽부터 평가하기로 보장이 되어 있음.

연산자 우선순위와 평가 순서는 다르다.
연산자 우선순위는 피연산자의 평가 순서와 연관이 있다.

A() + B() * C()

피연산자의 평가 순서는 연산자 우선순위에 의해서 결정되지 않음
연산자 우선순위에 따라 평가 순서가 따라가지 않는다는 소리

+ * 는 시퀀스 포인터가 아님
함수 호출 순서(가 곧 평가 순서)를 모르기 때문에 unspecified

각 함수를 먼저 평가하고 그 다음에 연산자 우선순위

예를 들어 A() => return 1, B() => return 2, C() => return 3 이라고 하였을 때
A() + B() * C(); 의 평가 후 구문은 1 + 2 * 3; 이 됨.
그 다음 연산자 우선 순위에 의해 2 * 3이 먼저 연산되어 6이되고 1 + 6이되어 7이됨.

평가 순서는 알 수 없지만 우선순위는 알 수 있음.

========================================평가순서 끝



































