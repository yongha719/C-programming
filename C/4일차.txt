=========================프로그램의 빌드 과정

빌드란 실행파일을 만드는 과정

소스코드가 실행 파일로 빌드되는 과정을 봤을 때

에러가 나면 컴파일시인지 런타임시인지 링커과정인지 알 수 있음

다른 컴파일 언어도 c언어의 빌드 과정이랑 비슷함

1.전처리 작업
2.컴파일 작업
3.어셈블 작업
4.링크 작업

실무에서는 2~3 or 1~3 작업을 컴파일작업이라 퉁침
링크작업이 중요하다

clang에선 명령어를 사용해서 한 작업씩 할 수 있음

규모가 있는 프로젝트에선
두 단계로 빌드하는 경우도 있음

그 이유는 컴파일 작업과 링크 작업을 나누는 것과 관련이 있음
링크 작업이 필요한 이유는 나중에 봄

전처리 작업하는 애를 전처리기라고 함

preprocessor
compiler
assembler
linker

my_math.h 파일 내용
int add(const int a, const int b);
int subtract(const int a, const int b);

my_math.c 파일 내용
#include "my_math.h"

int add(const int a, const int b) { return a + b; }
int subtract(const int a, const int b) { return a - b; }

main.c 파일 내용
#include "my_math.h"
int main(void)
{
    const int result = add(5, 3);
    return 0;
}

헤더파일이 없으면 발생하는 일

길어질 수록 내가 찾으려는 코드를 찾기 힘들어짐

헤더파일이 없다면?
main.c /* main 파일 하나에 프로그램에 필요한 모든 소스 코드 넣기 */
관련된 기능끼리 c 파일로 묶어서 관리한다.

game_manager.c /* 게임 관련된 코드 /
score_manager.c / 점수 관련된 코드 /
my_math.c/ 수학 관련된 코드 /
main.c / 프로그램 전체에 관련된 코드 */

빌드를 할 때 이 파일들을 넣어줘야 서로 사용 가능함
clang -std=c89 -W -Wall -pedantic-errors *.c

한 함수가 두 곳이상에서 사용해야 할 때

game_manager.c에서 add함수가 필요
score_manager.c에서 add함수가 필요
my_math.c에서 add함수가 필요

game_manager.c에 add함수 전방 선언, 파일 아래에 add함수 정의
score_manager.c에 add함수 전방 선언, 파일 아래에 add함수 정의
my_math.c에 add함수 전방 선언, 파일 아래에 add함수 정의

add 함수 3곳에서 사용

c에서 만드는 함수는 전역 함수
그럼 3개의 add함수 다 전역 함수

중복 정의 에러 발생

따라서 함수 정의 코드는 my_math.c에만 하고, 전방 선언하는 코드만 남기면 빌드에는 문제 없음.
game_manager.c에 add함수 전방 선언
score_manager.c에 add함수 전방 선언
my_math.c에 add함수 전방 선언, 파일 아래에 add함수 정의

ex : add함수의 스펙이 변경되는 경우

기존 add함수 - 숫자 2개를 받아서 결과값 반환
int add(const int a, const int b);

스펙 변경된 add함수 - 숫자 3개를 받아서 결과값 반환
int add(const int a, const int b, const int c);

스펙이 자주 바뀌면 많은 작업 필요해짐
그래서 전방 선언을 해주는 코드는 함수가 정의된 파일과
똑같은 파일을 만드는데 확장자만 바꾸자
헤더파일 생성

다른 파일에서 전방 선언 해줬던 코드들을 include해주는 코드로 바꾸자

game_manager.c에서 my_math.h 인클루드
score_manager.c에서 my_math.h 인클루드
my_math.c에서 my_math.h 인클루드, 파일 아래에 add함수 정의
my_math.h에서 my_math.c 에서 정의한 add함수 원형 전방 선언

앞으로는 my_math.c에서 정의한 add함수의 원형과
my_math.h에서 전방 선언한 add함수의 원형만 수정하면 됨.

헤더 파일 사용 예
2-1. 어떤 기능의 선언과 정의를 분리하려는 경우
게임 매니저와 관련된 변수, 함수는 game_manager.h에 선언하고
game_manager.c 파일에서 사용하거나 정의
game_manager.c에 정의(또는 사용)하기 위해선 게임매니저의 전방 선언이 필요하므로
game_manager.c 파일의 코드 시작 부분에 #include "game_manager.h" 를 작성해서
game_manager.h에 있는 전방 선언 코드를 가져와야 함

2-2. 다른 파일의 기능을 가져오려는 경우 
(선언 정보만 있으면 함수나 변수 사용 가능함, 정의 없어도 됨. 나중에 배움)
score_manager.c에서 game_manager의 변수 및 함수를 사용하고 싶으면
#include "game_manager.h" 코드를 넣어주면 됨.

#include 전처리작업임
#include 의 #이 전처리기 지시어이기 때문

전처리기는 소스코드를 받아서 확장된 코드로 바꿈

translation unit(단위)라고 함

전처리기 작업 과정

1. 주석 제거(컴파일할 대상이 아님)
2. 매크로를 대체할 코드로 복붙( Ex) define )
3. include할 파일 복붙

clang -std=c89 -W -Wall -pedantic-errors -E 파일명.c > 저장할이름.pre

-E 해당 c 파일들을 전처리기 작업만 해달라는 뜻
> 저장할이름.pre 
저장하게 하는 명령어

================== 컴파일 작업과정

컴파일러가 하는 일

translation unit 을 어셈블리어로 바꿔주는 놈
전처리기 작업을 마치고 나온 애를 어셈블리어로 바꿈

전방 선언 되어 있을 경우 해당 함수정의나 변수 선언부
함수 정의부 기준 똑같은 이름의 심볼 생성
함수 호출부 기준 그 이름이 전방 선언되어 있을 경우
함수 이름과 똑같은 레이블을 사용하는 코드를 생성
정의부를 못 찾았지만 어딘가에 있겠지하고 구멍을 만들고 넘어감
컴파일러가 구멍을 메꾼다는 뜻
코드로 점프하는 작업은 링크시 작업해줌

어셈블리어로 바뀌면 플랫폼마다 코드가 다름
컴파일러가 변환한 특정 플랫폼에서만 동작하는 코드
어셈블리어는 기계어랑 1ㄷ1 대응이 됨
플랫폼마다 기계가 동작하는 코드가 다름
기계어가 의존적인데 어셈블리어가 1ㄷ1 대응이 된다했으니
어셈블리어도 의존적임

======================== 어셈블 작업

어셈블 작업까진 translation unit만 보는거임

링크 작업은 오브젝트 코드를 봄

어셈블리어를 오브젝트 코드로 변환시켜줌

어셈블리어는 기계어와 1ㄷ1 대응
1ㄷ1로 대응되는 기계어로 변화시켜준다는 얘기

오브젝트 코드 = 기계어

오브젝트 코드로 만든 파일은 열지 모탐..
하지만 Hex editor 라는 것을 이용하면 가능해짐

=============================== 링크 작업

링커가 해주는 놈

오브젝트 코드는 c 파일 갯수만큼 나옴

그 오브젝트 코드들을 다 한덩이로 뭉쳐줌
위에서 컴파일 작업에서 구멍난걸 매꿔줌

생성된 오브젝트 코드들을 다 받아서 하나의 실행파일로 만들어줌

코드 주소를 기억해서 함수 정의부분의 코드 주소를 사용해서
그 코드로 점프함

만약 다른 오브젝트 코드에서 레이블을 찾지 못하면 
링커 에러가 나는 것임(외부 참조를 찾지 못했습니다)
ex)
Test-f1658a.o : error LNK2019: addmain 함수에서 참조되는 확인할 수 없는 외부 기호
Test.exe : fatal error LNK1120: 1개의 확인할 수 없는 외부 참조입니다.
clang: error: linker command failed with exit code 1120 (use -v to see invocation)

이렇게 해서 빌드가 완료됨

